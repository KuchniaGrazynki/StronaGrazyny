{"version":3,"sources":["res/empytable.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","FlipPic","state","isFlipped","handleClick","bind","e","preventDefault","this","setState","prevState","flipDirection","onClick","Card","Img","className","variant","src","props","recipe","zdjecie","class","przygotowanie","skladniki","map","ingredient","React","Component","RecipeCard","recipes","border","Body","Title","tytul","Text","opis","App","Jumbotron","style","backgroundImage","pizzabg","backgroundSize","padding","fluid","Container","CardColumns","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0GAAAA,EAAOC,QAAU,IAA0B,uC,gpDCQrCC,E,kDACJ,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,WAAW,GAEb,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBALP,E,wDAQFC,GACVA,EAAEC,iBACFC,KAAKC,UAAS,SAACC,GAAD,MAAgB,CAAEP,WAAYO,EAAUP,gB,+BAGtD,OACE,kBAAC,IAAD,CAAeA,UAAWK,KAAKN,MAAMC,UAAWQ,cAAc,YAC5D,uBAAGC,QAASJ,KAAKJ,aACf,kBAACS,EAAA,EAAKC,IAAN,CACEC,UAAU,MACVC,QAAQ,MACRC,IAAKT,KAAKU,MAAMC,OAAOC,WAI3B,uBAAGR,QAASJ,KAAKJ,aAEf,yBAAKiB,MAAM,iBACT,yBAAKA,MAAM,QAAQb,KAAKU,MAAMC,OAAOG,eACpCd,KAAKU,MAAMC,OAAOI,UAAUC,KAAI,SAAUC,GACzC,OAAO,4BAAKA,a,GA7BJC,IAAMC,WAsCtBC,E,uKAEF,OAAOpB,KAAKU,MAAMW,QAAQL,KAAI,SAAUL,GACtC,OACE,kBAACN,EAAA,EAAD,CAAMiB,OAAO,QAAQf,UAAU,QAC7B,kBAAC,EAAD,CAASI,OAAQA,IAEjB,kBAACN,EAAA,EAAKkB,KAAN,KACE,kBAAClB,EAAA,EAAKmB,MAAN,KAAab,EAAOc,OACpB,kBAACpB,EAAA,EAAKqB,KAAN,KAAYf,EAAOgB,e,GATNT,IAAMC,WA6ChBS,MA5Bf,WACE,OACE,yBAAKrB,UAAU,OACb,kBAACsB,EAAA,EAAD,CACEtB,UAAU,QACVuB,MAAO,CACLC,gBAAgB,OAAD,OAASC,IAAT,KACfC,eAAgB,QAChBC,QAAS,mBAEXC,OAAK,GAEL,kBAACC,EAAA,EAAD,KACE,4BACE,uCACA,8CACA,wCAEF,4FAGJ,kBAACC,EAAA,EAAD,CAAa9B,UAAU,WACrB,kBAAC,EAAD,CAAYc,QAASA,OCzETiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.61986876.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/empytable.79d10846.jpg\";","import React from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Jumbotron, Container, Card, Row, CardColumns } from \"react-bootstrap\";\nimport pizzabg from \"./res/empytable.jpg\";\nimport recipes from \"./res/przepisy.json\";\nimport ReactCardFlip from \"react-card-flip\";\n\nclass FlipPic extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      isFlipped: false,\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(e) {\n    e.preventDefault();\n    this.setState((prevState) => ({ isFlipped: !prevState.isFlipped }));\n  }\n  render() {\n    return (\n      <ReactCardFlip isFlipped={this.state.isFlipped} flipDirection=\"vertical\">\n        <a onClick={this.handleClick}>\n          <Card.Img\n            className=\"top\"\n            variant=\"top\"\n            src={this.props.recipe.zdjecie}\n          />\n        </a>\n\n        <a onClick={this.handleClick}>\n        \n          <div class=\"flip-box-back\">\n            <div class=\"prep\">{this.props.recipe.przygotowanie}</div>\n            {this.props.recipe.skladniki.map(function (ingredient) {\n              return <li>{ingredient}</li>;\n            })}\n          </div>\n        </a>\n      </ReactCardFlip>\n    );\n  }\n}\n\nclass RecipeCard extends React.Component {\n  render() {\n    return this.props.recipes.map(function (recipe) {\n      return (\n        <Card border=\"light\" className=\"card\">\n          <FlipPic recipe={recipe} />\n\n          <Card.Body>\n            <Card.Title>{recipe.tytul}</Card.Title>\n            <Card.Text>{recipe.opis}</Card.Text>\n          </Card.Body>\n        </Card>\n      );\n    });\n  }\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Jumbotron\n        className=\"jumbo\"\n        style={{\n          backgroundImage: `url(${pizzabg})`,\n          backgroundSize: \"cover\",\n          padding: \"25% 20% 15% 20%\",\n        }}\n        fluid\n      >\n        <Container>\n          <h1>\n            <span>PanDa</span>\n            <span>üêº</span>\n            <span>Tanio</span>\n          </h1>\n          <p>Na studenckƒÖ kiesze≈Ñ z tym co lod√≥wka nawinie!</p>\n        </Container>\n      </Jumbotron>\n      <CardColumns className=\"columns\">\n        <RecipeCard recipes={recipes} />\n      </CardColumns>\n    </div>\n  );\n}\n\nexport default App;\n\n{\n  /* <div class=\"flip-box\">\n        <div class=\"flip-box-front\">\n            <Card.Img className=\"top\" variant=\"top\" src={recipe.zdjecie} />\n        </div>\n        <div class=\"flip-box-back\">\n            {recipe.skladniki.map(function(ingredient){\n            return(\n            <li>{ingredient}</li>\n            )\n            })\n            }\n        </div>\n    </div> */\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}